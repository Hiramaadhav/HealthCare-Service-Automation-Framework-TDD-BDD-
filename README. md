Healthcare Service Automation Framework

This project demonstrates a comprehensive Healthcare Service Automation Framework built using Test-Driven Development (TDD) and Behavior-Driven Development (BDD) methodologies. The framework automates critical workflows in a healthcare service web application, such as login, appointment booking, confirmation, and logout functionalities.

üöÄ Project Overview
The framework is designed to ensure reliable, scalable, and efficient test automation for a healthcare service web application. By combining Selenium, Java, and Cucumber BDD, the framework provides an easy-to-maintain structure for web automation. Continuous integration is integrated with Jenkins to ensure automated test execution on each code commit or on a scheduled basis.

Key Features:
Automated Test Scenarios:

Login Page: Automated tests to verify secure login with valid/invalid credentials.

Booking Page: Automated appointment booking with various scenarios.

Confirmation Page: Validates booking confirmation details.

Logout Functionality: Ensures proper session termination after booking.

Page Object Model (POM): Uses POM for modular, reusable code that improves maintainability and scalability.

CI/CD Pipeline Integration: Integrated with Jenkins for continuous testing and automated test execution.

Detailed Reporting: Utilizes Extent Reports to generate HTML reports with logs, screenshots, and execution status for each test step.

üõ† Tech Stack & Tools
Selenium: For web automation and interaction with the web application.

Java: The programming language used for test automation.

Cucumber BDD: To define clear, business-readable test scenarios using Gherkin syntax.

Extent Reports: For detailed test execution reports, including screenshots of failed test cases for easy debugging.

Log4j2: For structured and comprehensive logging throughout the test execution.

Jenkins: For CI/CD integration, enabling continuous testing with automated test execution.

‚öôÔ∏è Framework Architecture
The framework is structured using the Page Object Model (POM) to separate concerns and enhance reusability:

Page Objects: Represent each page (Login, Booking, Confirmation, Logout) as separate classes, encapsulating the logic for page interactions.

Test Components: Each page object contains methods for interacting with page elements, and test cases are written to invoke these methods for verifying functionality.

Reusable Components: Common actions, such as waiting for elements, interacting with forms, etc., are encapsulated in utility classes for reuse across tests.

Key Components:
LoginPage: Contains methods to enter credentials and submit login forms.

BookingPage: Includes methods for selecting a date, time, and patient information to book an appointment.

ConfirmationPage: Validates the booking confirmation details, ensuring that the appointment is successfully booked.

LogoutPage: Ensures proper session termination by logging out the user.

Base Class: Handles test setup, initialization, and teardown, including configuration of WebDriver and TestNG annotations.

üìä Reporting & Logging
Reporting:
Extent Reports: Generates interactive HTML reports that provide detailed insights into test execution, including logs, screenshots (if applicable), and execution results.

Screenshots on Failure: Captures screenshots whenever a test fails, providing valuable debugging information.

Logging:
Log4j2: Logs detailed information at each step of the test execution process for traceability and debugging. Logs are saved in a dedicated log file for easy access and analysis.

üöÄ CI/CD Integration
The framework is integrated with Jenkins to automate test execution on every code commit or on a scheduled build. Jenkins handles the triggering, running, and reporting of tests, ensuring continuous validation of the application.

üìà Automation Goals Achieved
Improved Test Coverage: Automated testing of key functionalities ensures high test coverage, catching bugs early.

Faster, Reliable, and Repeatable Test Execution: Automation reduces manual intervention, leading to faster, more reliable test execution.

Continuous Testing: CI/CD pipeline integration with Jenkins ensures continuous validation of the application with every code change.

ü§ù Contributing
Feel free to fork this repository, submit issues, or contribute enhancements! If you have any questions or suggestions, please open an issue or pull request.
